// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef ATHMOVIL_CHECKOUT_SWIFT_H
#define ATHMOVIL_CHECKOUT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="athmovil_checkout",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSDictionary;

SWIFT_CLASS_NAMED("ATHMBusinessAccount")
@interface ATHMBusinessAccount : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// init by default, It is a representation of the business account
/// \param token business token it has to be the current token of the business
///
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token OBJC_DESIGNATED_INITIALIZER;
/// Create an object with a dictinary with the key public token if it is empty or the key does not exist will return set a empty token
/// \param dictionary dictionary that must containts the key token
///
- (nonnull instancetype)initWithDictionary:(NSDictionary * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@class NSCoder;

IB_DESIGNABLE
SWIFT_CLASS_NAMED("ATHMButton")
@interface ATHMButton : UIButton
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ATHMCustomer")
@interface ATHMCustomer : NSObject
/// Customer name it means the name  + lastName, it always has a value not matter the payment result
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Customer telephone Number, it always has a value not matter the payment result
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// Customer email, it always has a value not matter the payment result
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@class NSNumber;
@class ATHMPaymentItem;

SWIFT_CLASS_NAMED("ATHMPayment")
@interface ATHMPayment : NSObject
/// Total of the transaction, it is not calculated in the items
@property (nonatomic, readonly, strong) NSNumber * _Nonnull total;
/// Purchase subtotal in case the client would not need the subtotal can send as null
@property (nonatomic, strong) NSNumber * _Nonnull subtotal;
/// Purchase Tax it could be null and the tax would no send to ATH Movil
@property (nonatomic, strong) NSNumber * _Nonnull tax;
/// Fee amount of the payment
@property (nonatomic, strong) NSNumber * _Nonnull fee;
/// Net amount of the payment it means total - fee
@property (nonatomic, strong) NSNumber * _Nonnull netAmount;
/// Purchase items the client could send the list empty and ATH Movil personal will response with the items
@property (nonatomic, copy) NSArray<ATHMPaymentItem *> * _Nonnull items;
/// Purchase additional information one it could be null, if the client will send something ATH Movil Personal is going to return the information
@property (nonatomic, copy) NSString * _Nonnull metadata1;
/// Purchase additional information two it could be null, if the client will send something ATH Movil Personal is going to return the information
@property (nonatomic, copy) NSString * _Nonnull metadata2;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates an instance of the representation of the purchase, it is needed the total and the business account and the appclient from comes the request
/// \param total Purchases total it has to be greater than zero
///
- (nonnull instancetype)initWithTotal:(NSNumber * _Nonnull)total OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of the ATHMPayment with a dictionary must have the key total
/// \param dictionary The dictionary must have the total key and the others would be empty
///
- (nonnull instancetype)initWithDictionary:(NSDictionary * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_CLASS_NAMED("ATHMPaymentError")
@interface ATHMPaymentError : NSObject
/// A localized message describing the reason for the failure.
@property (nonatomic, readonly, copy) NSString * _Nonnull failureReason;
/// Error’s description in request or response
@property (nonatomic, readonly, copy) NSString * _Nonnull errorDescription;
/// If the error is in the request will be true otherwise will be false
@property (nonatomic, readonly) BOOL isRequestError;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ATHMPaymentResponse;

SWIFT_CLASS_NAMED("ATHMPaymentHandler")
@interface ATHMPaymentHandler : NSObject
/// Creates an instance of the handler payment
/// \param onCompleted Closure to call after ATH Movil completed the payment
///
/// \param onExpired Closure to call after ATH Movil expire the payment
///
/// \param onCancelled Closure to call after ATH Movil cancelled the payment
///
/// \param onException Closure to call when there an error en request o response
///
///
/// returns:
/// Instance of the handler
- (nonnull instancetype)initOnCompleted:(void (^ _Nonnull)(ATHMPaymentResponse * _Nonnull))onCompleted onExpired:(void (^ _Nonnull)(ATHMPaymentResponse * _Nonnull))onExpired onCancelled:(void (^ _Nonnull)(ATHMPaymentResponse * _Nonnull))onCancelled onException:(void (^ _Nonnull)(ATHMPaymentError * _Nonnull))onException OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("ATHMPaymentHandlerDictionary")
@interface ATHMPaymentHandlerDictionary : NSObject
/// Creates an instance of the handler payment
/// \param onCompleted Closure to call after ATH Movil completed the payment
///
/// \param onExpired Closure to call after ATH Movil expire the payment
///
/// \param onCancelled Closure to call after ATH Movil cancelled the payment
///
/// \param onException Closure to call when there is an error in the request or response
///
/// \param Returns Returns an instance of handler
///
- (nonnull instancetype)initOnCompleted:(void (^ _Nonnull)(NSDictionary * _Nonnull))onCompleted onExpired:(void (^ _Nonnull)(NSDictionary * _Nonnull))onExpired onCancelled:(void (^ _Nonnull)(NSDictionary * _Nonnull))onCancelled onException:(void (^ _Nonnull)(ATHMPaymentError * _Nonnull))onException OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("ATHMPaymentItem")
@interface ATHMPaymentItem : NSObject
/// Item name as the client request
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Item quantity as the client request, it must be greater than zero
@property (nonatomic, readonly) NSInteger quantity;
/// Item price, it must be greater than zero
@property (nonatomic, readonly, strong) NSNumber * _Nonnull price;
/// Description of the item
@property (nonatomic, copy) NSString * _Nonnull desc;
/// Additional information of the item if the client would send some information ATH Móvil Personal will return this information
@property (nonatomic, copy) NSString * _Nonnull metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates a representation of the item, this object does not calculate the price, it means it is not setting price * quantity, price is defined by client
/// \param name Item name there is not contraint about the content
///
/// \param price Item price must be greater than zero, the price total of the item
///
/// \param quantity Item description, can not be empty
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name price:(NSNumber * _Nonnull)price quantity:(NSInteger)quantity OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of ATHPaymentItem with a dictionary
/// \param dictionary dictionary that must containt the name, price and quantity keys the others are empty
///
- (nonnull instancetype)initWithDictionary:(NSDictionary * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@class ATHMURLScheme;

SWIFT_CLASS_NAMED("ATHMPaymentRequest")
@interface ATHMPaymentRequest : NSObject
/// Purchase Timeout in ath movil personal
@property (nonatomic) NSTimeInterval timeout;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates an instance of the representation of the request, it is needed the total and the business account and the appclient from comes the request, this constructor
/// it is for make the request without the button, in this case the buttons is the classic with the languaje english by default
/// \param account Business account, it is needed the token
///
/// \param scheme URL Scheme to response after ATH Movil processed the payment
///
/// \param payment Current purchase to send to ath movil
///
- (nonnull instancetype)initWithAccount:(ATHMBusinessAccount * _Nonnull)account scheme:(ATHMURLScheme * _Nonnull)scheme payment:(ATHMPayment * _Nonnull)payment OBJC_DESIGNATED_INITIALIZER;
/// Send the payment to ATH Movil personal, waiting for a response in a ATHMPaymentResponse
/// \param handler Closure to call after the response of the ATH Movil
///
- (void)payWithHandler:(ATHMPaymentHandler * _Nonnull)handler;
/// Send the payment to ATH Movil personal, waiting for a response in a NSDictionary
/// \param handler Closure to call after the response of the ATH Movil the response is going to be in dictionary
///
- (void)payWithDictionaryHandler:(ATHMPaymentHandlerDictionary * _Nonnull)handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class ATHMPaymentStatus;

SWIFT_CLASS_NAMED("ATHMPaymentResponse")
@interface ATHMPaymentResponse : NSObject
/// Current payment, it is the same object that the client have been sent in the request
@property (nonatomic, readonly, strong) ATHMPayment * _Nonnull payment;
/// Status of the payment completed, expired o cancelled and other purchase’s properties
@property (nonatomic, readonly, strong) ATHMPaymentStatus * _Nonnull status;
/// ATH Móvil’s customer
@property (nonatomic, readonly, strong) ATHMCustomer * _Nonnull customer;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

SWIFT_CLASS_NAMED("ATHMPaymentSession")
@interface ATHMPaymentSession : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ATHMPaymentSession * _Nonnull shared;)
+ (ATHMPaymentSession * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Set this property after the client app had been recevied the response from ATH Movil, after that the client’s application is going to recieve  the response by the
/// ATHMPaymentHandler or dictionary Handler
@property (nonatomic, copy) NSURL * _Nullable url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

SWIFT_CLASS_NAMED("ATHMPaymentStatus")
@interface ATHMPaymentStatus : NSObject
/// State of the payment it could be completed, expired or cancelled
@property (nonatomic, readonly, copy) NSString * _Nonnull statusPayment;
/// Date of the the transaction, it means the date and time of the application of the transaction
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Reference number of the transacction, if the transaction is completed has a value otherwise nil
@property (nonatomic, readonly, copy) NSString * _Nonnull referenceNumber;
/// Consecutive number of the trasaction, if the transaction is completed has a value otherwise nil
@property (nonatomic, readonly) NSInteger dailyTransactionID;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class UIColor;
@class UIImage;

SWIFT_PROTOCOL_NAMED("ATHMPaymentTheme")
@protocol ATHMPaymentTheme
/// Color for the control
@property (nonatomic, readonly, strong) UIColor * _Nonnull background;
/// Color for the label
@property (nonatomic, readonly, strong) UIColor * _Nonnull tintColor;
/// Image for the control
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@end


SWIFT_CLASS_NAMED("ATHMThemeClassic")
@interface ATHThemeClassic : NSObject <ATHMPaymentTheme>
/// Color for the control, orange
@property (nonatomic, readonly, strong) UIColor * _Nonnull background;
/// Color for the label, white
@property (nonatomic, readonly, strong) UIColor * _Nonnull tintColor;
/// Image for the control by default white_checkout_button_en
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// Init by default to create the image requested
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ATHMThemeLight")
@interface ATHThemeLight : NSObject <ATHMPaymentTheme>
/// Color for the control, white
@property (nonatomic, readonly, strong) UIColor * _Nonnull background;
/// Color for the label, black
@property (nonatomic, readonly, strong) UIColor * _Nonnull tintColor;
/// Image for the control by default black_checkout_button_en
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// Init by default to create the image requested
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ATHMThemeNight")
@interface ATHThemeNight : NSObject <ATHMPaymentTheme>
/// Color for the control, darkGray
@property (nonatomic, readonly, strong) UIColor * _Nonnull background;
/// Color for the label, white
@property (nonatomic, readonly, strong) UIColor * _Nonnull tintColor;
/// Image for the control by default black_checkout_button_en
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// Contructor by default to create the image requested
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ATHMURLScheme")
@interface ATHMURLScheme : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Init by default, It is a representation of the client application and the business account
/// \param urlScheme scheme of your app it is the url that ATH movil will send the response
///
- (nonnull instancetype)initWithUrlScheme:(NSString * _Nonnull)urlScheme OBJC_DESIGNATED_INITIALIZER;
/// You can use this constructor to create an object from a dictionary
/// \param dictionary This dictionary must containts the key scheme otherwise the property urlscheme is going to be an empty string
///
- (nonnull instancetype)initWithDictionary:(NSDictionary * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end












@interface UIButton (SWIFT_EXTENSION(athmovil_checkout))
- (void)toggleATHMNight;
- (void)toggleATHMLight;
- (void)toggleATHMClassic;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
